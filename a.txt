{ n: 0, c: [ Blk(Bind(Id(z), Ref(Num(1.0))), Blk(Bind(Id(f), Abs([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)))), Call(Id(f), [[Num(3.0)] - 1]))) ], v: [ ], s: [:], e: [:], l: [] }
{ n: 1, c: [ Bind(Id(z), Ref(Num(1.0))) #BLKDEC(false) Blk(Bind(Id(f), Abs([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)))), Call(Id(f), [[Num(3.0)] - 1])) #BLKCMD ], v: [ [] ], s: [:], e: [:], l: [] }
{ n: 2, c: [ Ref(Num(1.0)) #BIND #BLKDEC(false) Blk(Bind(Id(f), Abs([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)))), Call(Id(f), [[Num(3.0)] - 1])) #BLKCMD ], v: [ Id(z) [] ], s: [:], e: [:], l: [] }
{ n: 3, c: [ Num(1.0) #REF #BIND #BLKDEC(false) Blk(Bind(Id(f), Abs([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)))), Call(Id(f), [[Num(3.0)] - 1])) #BLKCMD ], v: [ Id(z) [] ], s: [:], e: [:], l: [] }
{ n: 4, c: [ #REF #BIND #BLKDEC(false) Blk(Bind(Id(f), Abs([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)))), Call(Id(f), [[Num(3.0)] - 1])) #BLKCMD ], v: [ 1.0 Id(z) [] ], s: [:], e: [:], l: [] }
{ n: 5, c: [ #BIND #BLKDEC(false) Blk(Bind(Id(f), Abs([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)))), Call(Id(f), [[Num(3.0)] - 1])) #BLKCMD ], v: [ Loc(0) Id(z) [] ], s: [0: 1.0], e: [:], l: [Loc(0)] }
{ n: 6, c: [ #BLKDEC(false) Blk(Bind(Id(f), Abs([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)))), Call(Id(f), [[Num(3.0)] - 1])) #BLKCMD ], v: [ ["z": Loc(0)] [] ], s: [0: 1.0], e: [:], l: [Loc(0)] }
{ n: 7, c: [ Blk(Bind(Id(f), Abs([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)))), Call(Id(f), [[Num(3.0)] - 1])) #BLKCMD ], v: [ [:] [] ], s: [0: 1.0], e: ["z": Loc(0)], l: [Loc(0)] }
{ n: 8, c: [ Bind(Id(f), Abs([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)))) #BLKDEC(false) Call(Id(f), [[Num(3.0)] - 1]) #BLKCMD #BLKCMD ], v: [ [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0)], l: [] }
{ n: 9, c: [ Abs([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil))) #BIND #BLKDEC(false) Call(Id(f), [[Num(3.0)] - 1]) #BLKCMD #BLKCMD ], v: [ Id(f) [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0)], l: [] }
{ n: 10, c: [ #BIND #BLKDEC(false) Call(Id(f), [[Num(3.0)] - 1]) #BLKCMD #BLKCMD ], v: [ Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]) Id(f) [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0)], l: [] }
{ n: 11, c: [ #BLKDEC(false) Call(Id(f), [[Num(3.0)] - 1]) #BLKCMD #BLKCMD ], v: [ ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0)], l: [] }
{ n: 12, c: [ Call(Id(f), [[Num(3.0)] - 1]) #BLKCMD #BLKCMD ], v: [ ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 13, c: [ Num(3.0) #CALL(Id(f), 1) #BLKCMD #BLKCMD ], v: [ ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 14, c: [ #CALL(Id(f), 1) #BLKCMD #BLKCMD ], v: [ 3.0 ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 15, c: [ Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)) #BLKCMD #BLKCMD #BLKCMD ], v: [ ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 16, c: [ #BLKDEC(true) Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 17, c: [ Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 18, c: [ Gt(Id(x), Num(1.0)) #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 19, c: [ Num(1.0) Id(x) #GT #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 20, c: [ Id(x) #GT #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 1.0 Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 21, c: [ #GT #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 3.0 1.0 Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 22, c: [ #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ true Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 23, c: [ CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 24, c: [ Assign(Id(z), Mul(Id(z), Id(x))) Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1]) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 25, c: [ Mul(Id(z), Id(x)) #ASSIGN Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1]) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ Id(z) ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 26, c: [ Id(x) Id(z) #MUL #ASSIGN Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1]) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ Id(z) ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 27, c: [ Id(z) #MUL #ASSIGN Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1]) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 3.0 Id(z) ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 28, c: [ #MUL #ASSIGN Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1]) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 1.0 3.0 Id(z) ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 29, c: [ #ASSIGN Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1]) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 3.0 Id(z) ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 1.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 30, c: [ Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1]) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 31, c: [ Sub(Id(x), Num(1.0)) #CALL(Id(f), 1) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 32, c: [ Num(1.0) Id(x) #SUB #CALL(Id(f), 1) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 33, c: [ Id(x) #SUB #CALL(Id(f), 1) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 1.0 ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 34, c: [ #SUB #CALL(Id(f), 1) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 3.0 1.0 ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 35, c: [ #CALL(Id(f), 1) #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 2.0 ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 36, c: [ Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 37, c: [ #BLKDEC(true) Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 38, c: [ Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 39, c: [ Gt(Id(x), Num(1.0)) #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 40, c: [ Num(1.0) Id(x) #GT #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 41, c: [ Id(x) #GT #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 1.0 Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 42, c: [ #GT #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 2.0 1.0 Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 43, c: [ #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ true Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 44, c: [ CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 45, c: [ Assign(Id(z), Mul(Id(z), Id(x))) Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1]) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 46, c: [ Mul(Id(z), Id(x)) #ASSIGN Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1]) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ Id(z) ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 47, c: [ Id(x) Id(z) #MUL #ASSIGN Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1]) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ Id(z) ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 48, c: [ Id(z) #MUL #ASSIGN Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1]) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 2.0 Id(z) ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 49, c: [ #MUL #ASSIGN Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1]) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 3.0 2.0 Id(z) ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 50, c: [ #ASSIGN Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1]) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 6.0 Id(z) ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 3.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 51, c: [ Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1]) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 52, c: [ Sub(Id(x), Num(1.0)) #CALL(Id(f), 1) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 53, c: [ Num(1.0) Id(x) #SUB #CALL(Id(f), 1) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 54, c: [ Id(x) #SUB #CALL(Id(f), 1) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 1.0 ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 55, c: [ #SUB #CALL(Id(f), 1) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 2.0 1.0 ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 56, c: [ #CALL(Id(f), 1) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 1.0 ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 57, c: [ Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 58, c: [ #BLKDEC(true) Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 59, c: [ Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 60, c: [ Gt(Id(x), Num(1.0)) #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 61, c: [ Num(1.0) Id(x) #GT #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 62, c: [ Id(x) #GT #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 1.0 Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 63, c: [ #GT #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ 1.0 1.0 Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 64, c: [ #COND #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ false Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil) ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 65, c: [ #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 66, c: [ #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["x": 1.0, "z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 67, c: [ #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 68, c: [ #BLKCMD #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)]), "z": Loc(0), "x": 2.0], l: [] }
{ n: 69, c: [ #BLKCMD #BLKCMD #BLKCMD #BLKCMD ], v: [ ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 70, c: [ #BLKCMD #BLKCMD #BLKCMD ], v: [ ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])] [] ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["z": Loc(0), "x": 3.0, "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 71, c: [ #BLKCMD #BLKCMD ], v: [ ["z": Loc(0)] [Loc(0)] [:] [] ], s: [0: 6.0], e: ["z": Loc(0), "f": Closure([[Id(x)] - 1], Blk(nil, Cond(Gt(Id(x), Num(1.0)), CSeq(Assign(Id(z), Mul(Id(z), Id(x))), Call(Id(f), [[Sub(Id(x), Num(1.0))] - 1])), nil)), ["z": Loc(0)])], l: [] }
{ n: 72, c: [ #BLKCMD ], v: [ [:] [] ], s: [0: 6.0], e: ["z": Loc(0)], l: [Loc(0)] }
{ n: 73, c: [ ], v: [ ], s: [:], e: [:], l: [] }
