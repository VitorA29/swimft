{ code: # test for logical and aritmethical operations
x:=3+(4-5)*2
y:=3<4
z:=x==1
w:=3>4 or z
k:=y and z
h:=3<4 == False
2+x*5
x+4
j:=2+x*5
 }
{ v: [ Num(5.0) Num(7.0) ], s: [5: Boo(false), 0: Num(1.0), 6: Num(7.0), 2: Boo(true), 3: Boo(true), 4: Boo(true), 1: Boo(true)], e: ["y": Localizable(address: 1), "h": Localizable(address: 5), "j": Localizable(address: 6), "x": Localizable(address: 0), "z": Localizable(address: 2), "k": Localizable(address: 4), "w": Localizable(address: 3)] }
{ code: # The classic iterative factorial example
	z := 1
	y := 10
	while not (y == 0)
	do
		z := z * y
		y := y - 1
	end
 }
{ v: [ ], s: [1: Num(0.0), 0: Num(3628800.0)], e: ["z": Localizable(address: 0), "y": Localizable(address: 1)] }
{ code: # A simple test for conditional operation
x:=10
if x==10
then
	z:=x-20
	if z<0
	then
		j:=5.0
	end
else
	y:=x*3
end
 }
{ v: [ ], s: [1: Num(-10.0), 0: Num(10.0), 2: Num(5.0)], e: ["x": Localizable(address: 0), "z": Localizable(address: 1), "j": Localizable(address: 2)] }
{ code: x:=True
y:=x == 1
 }
{ n: 8, c: [ #EQ #ASSIGN ], v: [ Boo(true) Num(1.0) Id(y) ], s: [0: Boo(true)], e: ["x": Localizable(address: 0)] }
ExpectedBooValue
{ code: x:=True
y:=x+1
 }
{ n: 8, c: [ #SUM #ASSIGN ], v: [ Boo(true) Num(1.0) Id(y) ], s: [0: Boo(true)], e: ["x": Localizable(address: 0)] }
ExpectedNumValue
{ code: x:= (4<3)+1
 }
+, '<'(NumberNode(4.0), NumberNode(3.0)), NumberNode(1.0)
ExpectedArithExpr
{ code: # Just a simple fibonacci example
x:=0
y:=1
z:=13
while z > 1
do
	aux:=y
	y:=y+x
	x:=aux
	z:=z-1
end
 }
{ v: [ ], s: [1: Num(233.0), 2: Num(1.0), 0: Num(144.0), 3: Num(144.0)], e: ["aux": Localizable(address: 3), "x": Localizable(address: 0), "z": Localizable(address: 2), "y": Localizable(address: 1)] }
